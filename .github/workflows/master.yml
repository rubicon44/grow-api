on:
  push:
    branches:
      - master

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_NAME: "grow-api"
  ECR_IMAGE_TAG: "latest"
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  AWS_APP_NAME: ${{ secrets.AWS_APP_NAME }}
  AWS_ENV_NAME: ${{ secrets.AWS_ENV_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.7

      - name: Install dependencies
        env:
          BUNDLE_PATH: vendor/bundle
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --retry 3 --jobs 4 --without development test

      # - name: Build package
      #   run: |
      #     zip -r deployment-package.zip . -x .git/\* -x .github/\* -x deploy.yml

      - name: Install aws-cli
        run: |
          sudo apt-get -y install python3-pip
          sudo pip3 install awscli

      # - name: Build Docker image
      #   env:
      #     # ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      #     IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.ECR_IMAGE_TAG }}
      #   run: |
      #     docker build -t $IMAGE_NAME .
      #     $(aws ecr get-login --no-include-email --region ${{ secrets.AWS_REGION }})
      #     docker push $IMAGE_NAME

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_IAM_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_IAM_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_DEFAULT_REGION

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.ECR_IMAGE_TAG }}
        run: |
          docker build -t $IMAGE_NAME .
          aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker push $IMAGE_NAME

      # - name: Build Docker image
      #   env:
      #     ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      #     IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.ECR_IMAGE_TAG }}
      #   run: |
      #     docker build -t $IMAGE_NAME .
      #     $(aws ecr get-login --no-include-email --region ${{ env.AWS_REGION }})
      #     docker push $IMAGE_NAME

      # - name: Deploy to ElasticBeanstalk
      #   uses: einaregilsson/beanstalk-deploy@v14
      #   with:
      #     aws_access_key: ${{ env.AWS_ACCESS_KEY_ID }}
      #     aws_secret_key: ${{ env.AWS_SECRET_ACCESS_KEY }}
      #     application_name: ${{ env.AWS_APP_NAME }}
      #     environment_name: ${{ env.AWS_ENV_NAME }}
      #     region: ${{ env.AWS_REGION }}
      #     version_label: ${{ github.sha }}
      #     docker_image: ${{ env.IMAGE_NAME }}
      #     # deployment_package: deployment-package.zip