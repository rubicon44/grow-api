on:
  push:
    branches:
      - master

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY_NAME: "grow-api"
  ECR_IMAGE_TAG: "latest"
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  AWS_APP_NAME: ${{ secrets.AWS_APP_NAME }}
  AWS_ENV_NAME: ${{ secrets.AWS_ENV_NAME }}
  EB_VERSION_LABEL: ${{ secrets.EB_VERSION_LABEL }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7.7

      - name: Install dependencies
        env:
          BUNDLE_PATH: vendor/bundle
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --retry 3 --jobs 4 --without development test

      - name: Install aws-cli
        run: |
          sudo apt-get -y install python3-pip
          sudo pip3 install awscli

      - name: Configure AWS credentials
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION

      - name: Build Docker image
        env:
          IMAGE_NAME: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY_NAME }}:${{ env.ECR_IMAGE_TAG }}
        run: |
          docker build -t $IMAGE_NAME .
          aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
          docker push $IMAGE_NAME

      - name: Build package
        run: |
          mkdir deployment-package
          find . -maxdepth 1 -not -name 'deployment-package' -exec cp -R {} deployment-package/ \;
          zip -r deployment-package.zip deployment-package/
          rm -r deployment-package

      - name: Create S3 bucket
        run: |
          aws s3api create-bucket --bucket ${{ env.S3_BUCKET_NAME }} --region $AWS_REGION

      - name: Upload deployment package to S3
        run: |
          aws s3 cp deployment-package.zip s3://${{ env.S3_BUCKET_NAME }}/deployment-package.zip

      - name: Set version label
        id: set_version_label
        run: echo "EB_VERSION_LABEL=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Deploy to ElasticBeanstalk
        run: |
          aws elasticbeanstalk create-application-version --application-name ${{ env.AWS_APP_NAME }} --version-label ${{ env.EB_VERSION_LABEL }} --source-bundle S3Bucket=${{ env.S3_BUCKET_NAME }},S3Key=deployment-package.zip
          aws elasticbeanstalk update-environment --environment-name ${{ env.AWS_ENV_NAME }} --version-label ${{ env.EB_VERSION_LABEL }}
