openapi: 3.0.0
info:
  title: grow
  version: '1.0'
servers:
  - url: /v1

paths:
  /csrf_token:
    get:
      tags:
        - csrf_token
      summary: Get Csrf Token
      responses:
        '200':
          $ref: '#/components/responses/CsrfTokenOK'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/ResourceConflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/sign_in:
    post:
      tags:
        - sign_in
      summary: Create a new user
      requestBody:
        $ref: '#/components/requestBodies/UserRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/SignInOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/ResourceConflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /users/{user_id}/relationships:
    post:
      security:
        - JWTAuth: []
      tags:
        - relationships
      summary: Create a relationship
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/ResourceConflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - JWTAuth: []
      tags:
        - relationships
      summary: Delete a relationship
      parameters:
        - $ref: '#/components/parameters/UserIdPathParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /{username}:
    get:
      security:
        - JWTAuth: []
      tags:
        - user
      summary: Get a user by username
      parameters:
        - $ref: '#/components/parameters/UsernamePathParam'
      responses:
        '200':
          $ref: '#/components/responses/UserOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - JWTAuth: []
      tags:
        - user
      summary: Update a user by username
      parameters:
        - $ref: '#/components/parameters/UsernamePathParam'
      requestBody:
        $ref: '#/components/requestBodies/UserUpdateInputRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UserOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
    # delete:
    #   security:
    #     - JWTAuth: []
    #   tags:
    #     - users
    #   summary: Delete a user by username
    #   parameters:
    #     - $ref: '#/components/parameters/UsernamePathParam'
    #   responses:
    #     '204':
    #       $ref: '#/components/responses/NoContent'
    #     '400':
    #       $ref: '#/components/responses/BadRequest'
    #     '401':
    #       $ref: '#/components/responses/Unauthorized'
    #     '403':
    #       $ref: '#/components/responses/Forbidden'
    #     '404':
    #       $ref: '#/components/responses/ResourceNotFound'
    #     '500':
    #       $ref: '#/components/responses/InternalServerError'
  /{username}/followings:
    get:
      security:
        - JWTAuth: []
      tags:
        - followings
      summary: Get followigs by username
      parameters:
        - $ref: '#/components/parameters/UsernamePathParam'
      responses:
        '200':
          $ref: '#/components/responses/FollowingsOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /{username}/followers:
    get:
      security:
        - JWTAuth: []
      tags:
        - followers
      summary: Get followers by username
      parameters:
        - $ref: '#/components/parameters/UsernamePathParam'
      responses:
        '200':
          $ref: '#/components/responses/FollowersOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /{username}/upload_avatar:
    post:
      security:
        - JWTAuth: []
      tags:
        - upload_avatar
      summary: Upload user avatar
      parameters:
        - $ref: '#/components/parameters/UsernamePathParam'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/ResourceConflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks:
    get:
      security:
        - JWTAuth: []
      tags:
        - tasks
      summary: Get all tasks
      responses:
        '200':
          $ref: '#/components/responses/TasksOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - JWTAuth: []
      tags:
        - tasks
      summary: Create a new task
      requestBody:
        $ref: '#/components/requestBodies/TaskRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/ResourceConflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # /tasks/{id}:
  /tasks/{task_id}:
    get:
      security:
        - JWTAuth: []
      tags:
        - task
      summary: Get a task
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/TaskOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      security:
        - JWTAuth: []
      tags:
        - task
      summary: Update a task
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/TaskUpdateInputRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TaskOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
        - JWTAuth: []
      tags:
        - task
      summary: Delete a task
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{task_id}/likes:
    get:
      security:
        - JWTAuth: []
      tags:
        - likes
      summary: Get all likes
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      responses:
        '200':
          $ref: '#/components/responses/LikesOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      security:
        - JWTAuth: []
      tags:
        - likes
      summary: Create a like
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
      requestBody:
        $ref: '#/components/requestBodies/TaskUpdateInputRequestBody'
      responses:
        '201':
          $ref: '#/components/responses/Created'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/ResourceConflict'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /tasks/{task_id}/likes/{id}:
    delete:
      security:
        - JWTAuth: []
      tags:
        - like
      summary: Delete a like
      parameters:
        - $ref: '#/components/parameters/TaskIdPathParam'
        - $ref: '#/components/parameters/LikeIdPathParam'
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /notifications:
    get:
      security:
        - JWTAuth: []
      tags:
        - notifications
      summary: Get all notifications
      responses:
        '200':
          $ref: '#/components/responses/NotificationsOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /searches:
    get:
      security:
        - JWTAuth: []
      tags:
        - searches
      summary: Get all search results of users or tasks
      responses:
        '200':
          $ref: '#/components/responses/SearchesOK'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/ResourceNotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    CsrfToken:
      type: object
      properties:
        csrf_token:
          type: string
    SignIn:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
        exp:
          type: string
    User:
      type: object
      properties:
        firebase_id:
          type: string
        bio:
          type: string
        email:
          type: string
        nickname:
          type: string
        username:
          type: string
    Task:
      type: object
      properties:
        user_id:
          type: integer
        title:
          type: string
        content:
          type: string
        status:
          type: string
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
    Like:
      type: object
      properties:
        user_id:
          type: integer
        task_id:
          type: integer
    Likes:
      type: object
      properties:
        likes:
          $ref: '#/components/schemas/Like'
        like_count:
          type: integer
    Notification:
      type: object
      properties:
        task_id:
          type: integer
        visited_id:
          type: integer
        visitor_id:
          type: integer
        action:
          type: string
        checked:
          type: boolean
    Notifications:
      type: object
      properties:
        follow_visitors:
          $ref: '#/components/schemas/User'
        like_visitors:
          $ref: '#/components/schemas/User'
        notifications:
          $ref: '#/components/schemas/Notification'
    Searches:
      type: object
      properties:
        task:
          $ref: '#/components/schemas/Task'
        user:
          $ref: '#/components/schemas/User'
    UserUpdateInput:
      type: object
      properties:
        bio:
          type: string
        email:
          type: string
        nickname:
          type: string
        username:
          type: string
    TaskUpdateInput:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        status:
          type: integer
        start_date:
          type: string
        end_date:
          type: string
    Error:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string

  parameters:
    UserIdPathParam:
      in: path
      name: user_id
      schema:
        type: integer
      required: true
      description: Id of the user
    UsernamePathParam:
      in: path
      name: username
      schema:
        type: string
      required: true
      description: Username of the user
    TaskIdPathParam:
      in: path
      name: task_id
      schema:
        type: integer
      required: true
      description: ID of the task
    LikeIdPathParam:
      in: path
      name: id
      schema:
        type: integer
      required: true
      description: ID of the like

  requestBodies:
    UserRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    TaskRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    UserUpdateInputRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserUpdateInput'
    TaskUpdateInputRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TaskUpdateInput'

  responses:
    OK:
      description: OK
    CsrfTokenOK:
      description: CsrfToken OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CsrfToken'
    SignInOK:
      description: SignIn OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignIn'
    UserOK:
      description: User OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    FollowingsOK:
      description: Followings OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    FollowersOK:
      description: Followers OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
    TaskOK:
      description: Task OK
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    TasksOK:
      description: Tasks OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Task'
    LikesOK:
      description: Likes OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Likes'
    NotificationsOK:
      description: Notifications OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Notifications'
    SearchesOK:
      description: Searches OK
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Searches'
    Created:
      description: Created
    UserCreated:
      description: User Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    TaskCreated:
      description: Task Created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
    NoContent:
      description: No Content
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - "Invalid request."
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - "Authorization token is missing."
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - "Access denied."
    ResourceConflict:
      description: Resource Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - "Resource already exists."
    ResourceNotFound:
      description: Resource Not Found Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - "Resource not found."
    UnprocessableEntity:
      description: Unprocessable Entity
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - "Invalid params."
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            errors:
              - "Internal Server Error."